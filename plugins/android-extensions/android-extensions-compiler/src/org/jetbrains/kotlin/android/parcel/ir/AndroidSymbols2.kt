/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */
// This file was autogenerated based on android.jar
package org.jetbrains.kotlin.android.parcel.ir

import kotlin.Int
import kotlin.String
import org.jetbrains.kotlin.backend.common.CommonBackendContext
import org.jetbrains.kotlin.backend.common.ir.Symbols
import org.jetbrains.kotlin.backend.common.ir.createImplicitParameterDeclarationWithWrappedDescriptor
import org.jetbrains.kotlin.descriptors.ClassKind
import org.jetbrains.kotlin.descriptors.Modality
import org.jetbrains.kotlin.descriptors.impl.EmptyPackageFragmentDescriptor
import org.jetbrains.kotlin.ir.UNDEFINED_OFFSET
import org.jetbrains.kotlin.ir.builders.IrBuilderWithScope
import org.jetbrains.kotlin.ir.builders.IrGeneratorContextBase
import org.jetbrains.kotlin.ir.builders.Scope
import org.jetbrains.kotlin.ir.builders.declarations.addConstructor
import org.jetbrains.kotlin.ir.builders.declarations.addExtensionReceiver
import org.jetbrains.kotlin.ir.builders.declarations.addField
import org.jetbrains.kotlin.ir.builders.declarations.addFunction
import org.jetbrains.kotlin.ir.builders.declarations.addGetter
import org.jetbrains.kotlin.ir.builders.declarations.addTypeParameter
import org.jetbrains.kotlin.ir.builders.declarations.addValueParameter
import org.jetbrains.kotlin.ir.builders.declarations.buildClass
import org.jetbrains.kotlin.ir.builders.declarations.buildProperty
import org.jetbrains.kotlin.ir.builders.irCall
import org.jetbrains.kotlin.ir.builders.irGetField
import org.jetbrains.kotlin.ir.declarations.IrModuleFragment
import org.jetbrains.kotlin.ir.declarations.IrPackageFragment
import org.jetbrains.kotlin.ir.declarations.impl.IrExternalPackageFragmentImpl
import org.jetbrains.kotlin.ir.descriptors.IrBuiltIns
import org.jetbrains.kotlin.ir.expressions.IrExpression
import org.jetbrains.kotlin.ir.symbols.IrClassSymbol
import org.jetbrains.kotlin.ir.symbols.IrConstructorSymbol
import org.jetbrains.kotlin.ir.symbols.IrFieldSymbol
import org.jetbrains.kotlin.ir.symbols.IrPropertySymbol
import org.jetbrains.kotlin.ir.symbols.IrSimpleFunctionSymbol
import org.jetbrains.kotlin.ir.symbols.IrSymbol
import org.jetbrains.kotlin.ir.symbols.impl.IrExternalPackageFragmentSymbolImpl
import org.jetbrains.kotlin.ir.types.defaultType
import org.jetbrains.kotlin.ir.types.makeNullable
import org.jetbrains.kotlin.ir.types.starProjectedType
import org.jetbrains.kotlin.ir.types.typeWith
import org.jetbrains.kotlin.name.FqName
import org.jetbrains.kotlin.name.Name

class AndroidSymbols2(
    context: CommonBackendContext,
    private val moduleFragment: IrModuleFragment
) {
    val irBuiltIns: IrBuiltIns = context.irBuiltIns

    val irSymbols: Symbols<CommonBackendContext> = context.ir.symbols

    private val androidOs: IrPackageFragment = createPackage("android.os")

    private val androidText: IrPackageFragment = createPackage("android.text")

    private val androidUtil: IrPackageFragment = createPackage("android.util")

    private val javaIo: IrPackageFragment = createPackage("java.io")

    private val javaLang: IrPackageFragment = createPackage("java.lang")

    private val javaUtil: IrPackageFragment = createPackage("java.util")

    private val kotlinJvm: IrPackageFragment = createPackage("kotlin.jvm")

    val androidOsBundle: IrClassSymbol =
        createClass(androidOs, "Bundle", ClassKind.CLASS, Modality.FINAL)

    val androidOsIBinder: IrClassSymbol =
        createClass(androidOs, "IBinder", ClassKind.INTERFACE, Modality.ABSTRACT)

    val androidOsIInterface: IrClassSymbol =
        createClass(androidOs, "IInterface", ClassKind.INTERFACE, Modality.ABSTRACT)

    val androidOsParcel: IrClassSymbol =
        createClass(androidOs, "Parcel", ClassKind.CLASS, Modality.FINAL)

    val androidOsParcelFileDescriptor: IrClassSymbol =
        createClass(androidOs, "ParcelFileDescriptor", ClassKind.CLASS, Modality.OPEN)

    val androidOsParcelable: IrClassSymbol =
        createClass(androidOs, "Parcelable", ClassKind.INTERFACE, Modality.ABSTRACT)

    val androidOsPersistableBundle: IrClassSymbol =
        createClass(androidOs, "PersistableBundle", ClassKind.CLASS, Modality.FINAL)

    val androidTextTextUtils: IrClassSymbol =
        createClass(androidText, "TextUtils", ClassKind.CLASS, Modality.OPEN)

    val androidUtilSize: IrClassSymbol =
        createClass(androidUtil, "Size", ClassKind.CLASS, Modality.FINAL)

    val androidUtilSizeF: IrClassSymbol =
        createClass(androidUtil, "SizeF", ClassKind.CLASS, Modality.FINAL)

    val androidUtilSparseArray: IrClassSymbol =
        createClass(androidUtil, "SparseArray", ClassKind.CLASS, Modality.OPEN)

    val androidUtilSparseBooleanArray: IrClassSymbol =
        createClass(androidUtil, "SparseBooleanArray", ClassKind.CLASS, Modality.OPEN)

    val javaIoFileDescriptor: IrClassSymbol =
        createClass(javaIo, "FileDescriptor", ClassKind.CLASS, Modality.FINAL)

    val javaIoSerializable: IrClassSymbol =
        createClass(javaIo, "Serializable", ClassKind.INTERFACE, Modality.ABSTRACT)

    val javaLangClass: IrClassSymbol =
        createClass(javaLang, "Class", ClassKind.CLASS, Modality.FINAL)

    val javaLangClassLoader: IrClassSymbol =
        createClass(javaLang, "ClassLoader", ClassKind.CLASS, Modality.ABSTRACT)

    val javaLangException: IrClassSymbol =
        createClass(javaLang, "Exception", ClassKind.CLASS, Modality.OPEN)

    val javaUtilArrayList: IrClassSymbol =
        createClass(javaUtil, "ArrayList", ClassKind.CLASS, Modality.OPEN)

    val javaUtilHashMap: IrClassSymbol =
        createClass(javaUtil, "HashMap", ClassKind.CLASS, Modality.OPEN)

    val javaUtilLinkedHashSet: IrClassSymbol =
        createClass(javaUtil, "LinkedHashSet", ClassKind.CLASS, Modality.OPEN)

    val javaUtilLinkedList: IrClassSymbol =
        createClass(javaUtil, "LinkedList", ClassKind.CLASS, Modality.OPEN)

    val javaUtilList: IrClassSymbol =
        createClass(javaUtil, "List", ClassKind.INTERFACE, Modality.ABSTRACT)

    val javaUtilMap: IrClassSymbol =
        createClass(javaUtil, "Map", ClassKind.INTERFACE, Modality.ABSTRACT)

    val javaUtilTreeSet: IrClassSymbol =
        createClass(javaUtil, "TreeSet", ClassKind.CLASS, Modality.OPEN)

    val androidOsParcelableCreator: IrClassSymbol = buildClass {
        name = Name.identifier("Creator")
        kind = ClassKind.INTERFACE
        modality = Modality.ABSTRACT
    }.apply {
        createImplicitParameterDeclarationWithWrappedDescriptor()
        val t = addTypeParameter("T", context.irBuiltIns.anyNType)
        parent = androidOsParcelable.owner

        addFunction("createFromParcel", t.defaultType, Modality.ABSTRACT).apply {
            addValueParameter("source", androidOsParcel.defaultType)
        }

        addFunction("newArray", irBuiltIns.arrayClass.typeWith(t.defaultType.makeNullable()),
                    Modality.ABSTRACT).apply {
            addValueParameter("size", context.irBuiltIns.intType)
        }
    }.symbol

    val kotlinKClassJava: IrPropertySymbol = buildProperty {
        name = Name.identifier("java")
    }.apply {
        parent = kotlinJvm
        addGetter().apply {
            addExtensionReceiver(irBuiltIns.kClassClass.starProjectedType)
            returnType = javaLangClass.defaultType
        }
    }.symbol

    val parcelCreateBinderArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createBinderArray", irBuiltIns.arrayClass.typeWith(androidOsIBinder.defaultType)).symbol

    val parcelCreateBinderArrayList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createBinderArrayList", javaUtilArrayList.defaultType).symbol

    val parcelCreateBooleanArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createBooleanArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.booleanType).defaultType).symbol

    val parcelCreateByteArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createByteArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.byteType).defaultType).symbol

    val parcelCreateCharArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createCharArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.charType).defaultType).symbol

    val parcelCreateDoubleArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createDoubleArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.doubleType).defaultType).symbol

    val parcelCreateFloatArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createFloatArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.floatType).defaultType).symbol

    val parcelCreateIntArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createIntArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.intType).defaultType).symbol

    val parcelCreateLongArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createLongArray", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.longType).defaultType).symbol

    val parcelCreateStringArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createStringArray", irBuiltIns.arrayClass.typeWith(irBuiltIns.stringType)).symbol

    val parcelCreateStringArrayList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createStringArrayList", javaUtilArrayList.defaultType).symbol

    val parcelCreateTypedArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createTypedArray", irBuiltIns.arrayClass.typeWith(irBuiltIns.anyNType)).apply {
            addValueParameter("c", androidOsParcelableCreator.defaultType)
        }.symbol

    val parcelCreateTypedArrayList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("createTypedArrayList", javaUtilArrayList.defaultType).apply {
            addValueParameter("c", androidOsParcelableCreator.defaultType)
        }.symbol

    val parcelReadArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readArray", irBuiltIns.arrayClass.typeWith(irBuiltIns.anyNType)).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadArrayList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readArrayList", javaUtilArrayList.defaultType).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadBinderArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readBinderArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(androidOsIBinder.defaultType))
        }.symbol

    val parcelReadBinderList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readBinderList", irBuiltIns.unitType).apply {
            addValueParameter("list", javaUtilList.defaultType)
        }.symbol

    val parcelReadBooleanArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readBooleanArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.booleanType).defaultType)
        }.symbol

    val parcelReadBundle: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readBundle", androidOsBundle.defaultType).symbol

    val parcelReadByte: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readByte", irBuiltIns.byteType).symbol

    val parcelReadByteArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readByteArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.byteType).defaultType)
        }.symbol

    val parcelReadCharArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readCharArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.charType).defaultType)
        }.symbol

    val parcelReadDouble: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readDouble", irBuiltIns.doubleType).symbol

    val parcelReadDoubleArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readDoubleArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.doubleType).defaultType)
        }.symbol

    val parcelReadException: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readException", irBuiltIns.unitType).symbol

    val parcelReadFileDescriptor: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readFileDescriptor", androidOsParcelFileDescriptor.defaultType).symbol

    val parcelReadFloat: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readFloat", irBuiltIns.floatType).symbol

    val parcelReadFloatArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readFloatArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.floatType).defaultType)
        }.symbol

    val parcelReadHashMap: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readHashMap", javaUtilHashMap.defaultType).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadInt: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readInt", irBuiltIns.intType).symbol

    val parcelReadIntArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readIntArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.intType).defaultType)
        }.symbol

    val parcelReadList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readList", irBuiltIns.unitType).apply {
            addValueParameter("outVal", javaUtilList.defaultType)
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadLong: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readLong", irBuiltIns.longType).symbol

    val parcelReadLongArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readLongArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.longType).defaultType)
        }.symbol

    val parcelReadMap: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readMap", irBuiltIns.unitType).apply {
            addValueParameter("outVal", javaUtilMap.defaultType)
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadParcelable: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readParcelable", androidOsParcelable.defaultType).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadParcelableArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readParcelableArray", irBuiltIns.arrayClass.typeWith(androidOsParcelable.defaultType)).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadPersistableBundle: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readPersistableBundle", androidOsPersistableBundle.defaultType).symbol

    val parcelReadSerializable: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readSerializable", javaIoSerializable.defaultType).symbol

    val parcelReadSize: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readSize", androidUtilSize.defaultType).symbol

    val parcelReadSizeF: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readSizeF", androidUtilSizeF.defaultType).symbol

    val parcelReadSparseArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readSparseArray", androidUtilSparseArray.defaultType).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelReadSparseBooleanArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readSparseBooleanArray", androidUtilSparseBooleanArray.defaultType).symbol

    val parcelReadString: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readString", irBuiltIns.stringType).symbol

    val parcelReadStringArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readStringArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(irBuiltIns.stringType))
        }.symbol

    val parcelReadStringList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readStringList", irBuiltIns.unitType).apply {
            addValueParameter("list", javaUtilList.defaultType)
        }.symbol

    val parcelReadStrongBinder: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readStrongBinder", androidOsIBinder.defaultType).symbol

    val parcelReadTypedArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readTypedArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(irBuiltIns.anyNType))
            addValueParameter("c", androidOsParcelableCreator.defaultType)
        }.symbol

    val parcelReadTypedList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readTypedList", irBuiltIns.unitType).apply {
            addValueParameter("list", javaUtilList.defaultType)
            addValueParameter("c", androidOsParcelableCreator.defaultType)
        }.symbol

    val parcelReadTypedObject: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readTypedObject", irBuiltIns.anyNType).apply {
            addValueParameter("c", androidOsParcelableCreator.defaultType)
        }.symbol

    val parcelReadValue: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("readValue", irBuiltIns.anyNType).apply {
            addValueParameter("loader", javaLangClassLoader.defaultType)
        }.symbol

    val parcelWriteArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(irBuiltIns.anyNType))
        }.symbol

    val parcelWriteBinderArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeBinderArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(androidOsIBinder.defaultType))
        }.symbol

    val parcelWriteBinderList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeBinderList", irBuiltIns.unitType).apply {
            addValueParameter("val", javaUtilList.defaultType)
        }.symbol

    val parcelWriteBooleanArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeBooleanArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.booleanType).defaultType)
        }.symbol

    val parcelWriteBundle: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeBundle", irBuiltIns.unitType).apply {
            addValueParameter("val", androidOsBundle.defaultType)
        }.symbol

    val parcelWriteByte: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeByte", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.byteType)
        }.symbol

    val parcelWriteByteArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeByteArray", irBuiltIns.unitType).apply {
            addValueParameter("b", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.byteType).defaultType)
        }.symbol

    val parcelWriteCharArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeCharArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.charType).defaultType)
        }.symbol

    val parcelWriteDouble: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeDouble", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.doubleType)
        }.symbol

    val parcelWriteDoubleArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeDoubleArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.doubleType).defaultType)
        }.symbol

    val parcelWriteException: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeException", irBuiltIns.unitType).apply {
            addValueParameter("e", javaLangException.defaultType)
        }.symbol

    val parcelWriteFileDescriptor: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeFileDescriptor", irBuiltIns.unitType).apply {
            addValueParameter("val", javaIoFileDescriptor.defaultType)
        }.symbol

    val parcelWriteFloat: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeFloat", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.floatType)
        }.symbol

    val parcelWriteFloatArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeFloatArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.floatType).defaultType)
        }.symbol

    val parcelWriteInt: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeInt", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.intType)
        }.symbol

    val parcelWriteIntArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeIntArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.intType).defaultType)
        }.symbol

    val parcelWriteInterfaceToken: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeInterfaceToken", irBuiltIns.unitType).apply {
            addValueParameter("interfaceName", irBuiltIns.stringType)
        }.symbol

    val parcelWriteList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeList", irBuiltIns.unitType).apply {
            addValueParameter("val", javaUtilList.defaultType)
        }.symbol

    val parcelWriteLong: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeLong", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.longType)
        }.symbol

    val parcelWriteLongArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeLongArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.primitiveArrayForType.getValue(irBuiltIns.longType).defaultType)
        }.symbol

    val parcelWriteMap: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeMap", irBuiltIns.unitType).apply {
            addValueParameter("val", javaUtilMap.defaultType)
        }.symbol

    val parcelWriteNoException: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeNoException", irBuiltIns.unitType).symbol

    val parcelWriteParcelable: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeParcelable", irBuiltIns.unitType).apply {
            addValueParameter("p", androidOsParcelable.defaultType)
            addValueParameter("parcelableFlags", irBuiltIns.intType)
        }.symbol

    val parcelWriteParcelableArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeParcelableArray", irBuiltIns.unitType).apply {
            addValueParameter("value", irBuiltIns.arrayClass.typeWith(androidOsParcelable.defaultType))
            addValueParameter("parcelableFlags", irBuiltIns.intType)
        }.symbol

    val parcelWritePersistableBundle: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writePersistableBundle", irBuiltIns.unitType).apply {
            addValueParameter("val", androidOsPersistableBundle.defaultType)
        }.symbol

    val parcelWriteSerializable: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeSerializable", irBuiltIns.unitType).apply {
            addValueParameter("s", javaIoSerializable.defaultType)
        }.symbol

    val parcelWriteSize: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeSize", irBuiltIns.unitType).apply {
            addValueParameter("val", androidUtilSize.defaultType)
        }.symbol

    val parcelWriteSizeF: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeSizeF", irBuiltIns.unitType).apply {
            addValueParameter("val", androidUtilSizeF.defaultType)
        }.symbol

    val parcelWriteSparseArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeSparseArray", irBuiltIns.unitType).apply {
            addValueParameter("val", androidUtilSparseArray.defaultType)
        }.symbol

    val parcelWriteSparseBooleanArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeSparseBooleanArray", irBuiltIns.unitType).apply {
            addValueParameter("val", androidUtilSparseBooleanArray.defaultType)
        }.symbol

    val parcelWriteString: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeString", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.stringType)
        }.symbol

    val parcelWriteStringArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeStringArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(irBuiltIns.stringType))
        }.symbol

    val parcelWriteStringList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeStringList", irBuiltIns.unitType).apply {
            addValueParameter("val", javaUtilList.defaultType)
        }.symbol

    val parcelWriteStrongBinder: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeStrongBinder", irBuiltIns.unitType).apply {
            addValueParameter("val", androidOsIBinder.defaultType)
        }.symbol

    val parcelWriteStrongInterface: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeStrongInterface", irBuiltIns.unitType).apply {
            addValueParameter("val", androidOsIInterface.defaultType)
        }.symbol

    val parcelWriteTypedArray: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeTypedArray", irBuiltIns.unitType).apply {
            addValueParameter("val", irBuiltIns.arrayClass.typeWith(androidOsParcelable.defaultType))
            addValueParameter("parcelableFlags", irBuiltIns.intType)
        }.symbol

    val parcelWriteTypedList: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeTypedList", irBuiltIns.unitType).apply {
            addValueParameter("val", javaUtilList.defaultType)
        }.symbol

    val parcelWriteTypedObject: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeTypedObject", irBuiltIns.unitType).apply {
            addValueParameter("val", androidOsParcelable.defaultType)
            addValueParameter("parcelableFlags", irBuiltIns.intType)
        }.symbol

    val parcelWriteValue: IrSimpleFunctionSymbol =
        androidOsParcel.owner.addFunction("writeValue", irBuiltIns.unitType).apply {
            addValueParameter("v", irBuiltIns.anyNType)
        }.symbol

    val textUtilsWriteToParcel: IrSimpleFunctionSymbol =
        androidTextTextUtils.owner.addFunction("writeToParcel", irBuiltIns.unitType, isStatic = true).apply {
            addValueParameter("cs", irSymbols.charSequence.defaultType)
            addValueParameter("p", androidOsParcel.defaultType)
            addValueParameter("parcelableFlags", irBuiltIns.intType)
        }.symbol

    val classGetClassLoader: IrSimpleFunctionSymbol =
        javaLangClass.owner.addFunction("getClassLoader", javaLangClassLoader.defaultType).symbol

    val arrayListConstructor: IrConstructorSymbol = javaUtilArrayList.owner.addConstructor().apply {
        addValueParameter("p_0", irBuiltIns.intType)
    }.symbol

    val arrayListAdd: IrSimpleFunctionSymbol =
        javaUtilArrayList.owner.addFunction("add", irBuiltIns.booleanType).apply {
            addValueParameter("p_0", irBuiltIns.anyNType)
        }.symbol

    val linkedHashSetConstructor: IrConstructorSymbol =
        javaUtilLinkedHashSet.owner.addConstructor().apply {
            addValueParameter("p_0", irBuiltIns.intType)
        }.symbol

    val linkedHashSetAdd: IrSimpleFunctionSymbol =
        javaUtilLinkedHashSet.owner.addFunction("add", irBuiltIns.booleanType).apply {
            addValueParameter("p_0", irBuiltIns.anyNType)
        }.symbol

    val linkedListConstructor: IrConstructorSymbol =
        javaUtilLinkedList.owner.addConstructor().symbol

    val linkedListAdd: IrSimpleFunctionSymbol =
        javaUtilLinkedList.owner.addFunction("add", irBuiltIns.booleanType).apply {
            addValueParameter("p_0", irBuiltIns.anyNType)
        }.symbol

    val treeSetConstructor: IrConstructorSymbol = javaUtilTreeSet.owner.addConstructor().symbol

    val treeSetAdd: IrSimpleFunctionSymbol =
        javaUtilTreeSet.owner.addFunction("add", irBuiltIns.booleanType).apply {
            addValueParameter("p_0", irBuiltIns.anyNType)
        }.symbol

    val textUtilsCharSequenceCreator: IrFieldSymbol = androidTextTextUtils.owner.addField {
        name = Name.identifier("CHAR_SEQUENCE_CREATOR")
        type = androidOsParcelableCreator.defaultType
        isStatic = true
    }.symbol

    private fun createPackage(packageName: String): IrPackageFragment =
        IrExternalPackageFragmentImpl(IrExternalPackageFragmentSymbolImpl(EmptyPackageFragmentDescriptor(moduleFragment.descriptor,FqName(packageName))))

    private fun createClass(
        irPackage: IrPackageFragment,
        shortName: String,
        classKind: ClassKind,
        classModality: Modality
    ): IrClassSymbol = buildClass {
        name = Name.identifier(shortName)
        kind = classKind
        modality = classModality
    }.apply {
        parent = irPackage
        createImplicitParameterDeclarationWithWrappedDescriptor()
    }.symbol

    fun createBuilder(
        symbol: IrSymbol,
        startOffset: Int = UNDEFINED_OFFSET,
        endOffset: Int = UNDEFINED_OFFSET
    ) = AndroidIrBuilder(this, symbol, startOffset, endOffset)
}

class AndroidIrBuilder internal constructor(
    val androidSymbols: AndroidSymbols2,
    symbol: IrSymbol,
    startOffset: Int,
    endOffset: Int
) : IrBuilderWithScope(IrGeneratorContextBase(androidSymbols.irBuiltIns), Scope(symbol),
                       startOffset, endOffset) {
    fun parcelCreateBinderArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateBinderArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateBinderArrayList(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateBinderArrayList).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateBooleanArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateBooleanArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateByteArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateByteArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateCharArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateCharArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateDoubleArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateDoubleArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateFloatArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateFloatArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateIntArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateIntArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateLongArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateLongArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateStringArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateStringArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateStringArrayList(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateStringArrayList).apply {
            dispatchReceiver = receiver
        }

    fun parcelCreateTypedArray(receiver: IrExpression, c: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateTypedArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, c)
        }

    fun parcelCreateTypedArrayList(receiver: IrExpression, c: IrExpression): IrExpression =
        irCall(androidSymbols.parcelCreateTypedArrayList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, c)
        }

    fun parcelReadArray(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadArrayList(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadArrayList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadBinderArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadBinderArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadBinderList(receiver: IrExpression, list: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadBinderList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, list)
        }

    fun parcelReadBooleanArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadBooleanArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadBundle(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadBundle).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadByte(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadByte).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadByteArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadByteArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadCharArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadCharArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadDouble(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadDouble).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadDoubleArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadDoubleArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadException(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadException).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadFileDescriptor(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadFileDescriptor).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadFloat(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadFloat).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadFloatArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadFloatArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadHashMap(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadHashMap).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadInt(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadInt).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadIntArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadIntArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadList(
        receiver: IrExpression,
        outVal: IrExpression,
        loader: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelReadList).apply {
        dispatchReceiver = receiver
        putValueArgument(0, outVal)
        putValueArgument(1, loader)
    }

    fun parcelReadLong(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadLong).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadLongArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadLongArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadMap(
        receiver: IrExpression,
        outVal: IrExpression,
        loader: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelReadMap).apply {
        dispatchReceiver = receiver
        putValueArgument(0, outVal)
        putValueArgument(1, loader)
    }

    fun parcelReadParcelable(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadParcelable).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadParcelableArray(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadParcelableArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadPersistableBundle(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadPersistableBundle).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadSerializable(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadSerializable).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadSize(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadSize).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadSizeF(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadSizeF).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadSparseArray(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadSparseArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelReadSparseBooleanArray(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadSparseBooleanArray).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadString(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadString).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadStringArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadStringArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelReadStringList(receiver: IrExpression, list: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadStringList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, list)
        }

    fun parcelReadStrongBinder(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadStrongBinder).apply {
            dispatchReceiver = receiver
        }

    fun parcelReadTypedArray(
        receiver: IrExpression,
        value: IrExpression,
        c: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelReadTypedArray).apply {
        dispatchReceiver = receiver
        putValueArgument(0, value)
        putValueArgument(1, c)
    }

    fun parcelReadTypedList(
        receiver: IrExpression,
        list: IrExpression,
        c: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelReadTypedList).apply {
        dispatchReceiver = receiver
        putValueArgument(0, list)
        putValueArgument(1, c)
    }

    fun parcelReadTypedObject(receiver: IrExpression, c: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadTypedObject).apply {
            dispatchReceiver = receiver
            putValueArgument(0, c)
        }

    fun parcelReadValue(receiver: IrExpression, loader: IrExpression): IrExpression =
        irCall(androidSymbols.parcelReadValue).apply {
            dispatchReceiver = receiver
            putValueArgument(0, loader)
        }

    fun parcelWriteArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteBinderArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteBinderArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteBinderList(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteBinderList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteBooleanArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteBooleanArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteBundle(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteBundle).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteByte(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteByte).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteByteArray(receiver: IrExpression, b: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteByteArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, b)
        }

    fun parcelWriteCharArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteCharArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteDouble(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteDouble).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteDoubleArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteDoubleArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteException(receiver: IrExpression, e: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteException).apply {
            dispatchReceiver = receiver
            putValueArgument(0, e)
        }

    fun parcelWriteFileDescriptor(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteFileDescriptor).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteFloat(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteFloat).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteFloatArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteFloatArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteInt(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteInt).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteIntArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteIntArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteInterfaceToken(receiver: IrExpression, interfaceName: IrExpression): IrExpression
            = irCall(androidSymbols.parcelWriteInterfaceToken).apply {
        dispatchReceiver = receiver
        putValueArgument(0, interfaceName)
    }

    fun parcelWriteList(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteLong(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteLong).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteLongArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteLongArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteMap(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteMap).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteNoException(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteNoException).apply {
            dispatchReceiver = receiver
        }

    fun parcelWriteParcelable(
        receiver: IrExpression,
        p: IrExpression,
        parcelableFlags: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelWriteParcelable).apply {
        dispatchReceiver = receiver
        putValueArgument(0, p)
        putValueArgument(1, parcelableFlags)
    }

    fun parcelWriteParcelableArray(
        receiver: IrExpression,
        value: IrExpression,
        parcelableFlags: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelWriteParcelableArray).apply {
        dispatchReceiver = receiver
        putValueArgument(0, value)
        putValueArgument(1, parcelableFlags)
    }

    fun parcelWritePersistableBundle(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWritePersistableBundle).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteSerializable(receiver: IrExpression, s: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteSerializable).apply {
            dispatchReceiver = receiver
            putValueArgument(0, s)
        }

    fun parcelWriteSize(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteSize).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteSizeF(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteSizeF).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteSparseArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteSparseArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteSparseBooleanArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteSparseBooleanArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteString(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteString).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteStringArray(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteStringArray).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteStringList(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteStringList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteStrongBinder(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteStrongBinder).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteStrongInterface(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteStrongInterface).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteTypedArray(
        receiver: IrExpression,
        value: IrExpression,
        parcelableFlags: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelWriteTypedArray).apply {
        dispatchReceiver = receiver
        putValueArgument(0, value)
        putValueArgument(1, parcelableFlags)
    }

    fun parcelWriteTypedList(receiver: IrExpression, value: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteTypedList).apply {
            dispatchReceiver = receiver
            putValueArgument(0, value)
        }

    fun parcelWriteTypedObject(
        receiver: IrExpression,
        value: IrExpression,
        parcelableFlags: IrExpression
    ): IrExpression = irCall(androidSymbols.parcelWriteTypedObject).apply {
        dispatchReceiver = receiver
        putValueArgument(0, value)
        putValueArgument(1, parcelableFlags)
    }

    fun parcelWriteValue(receiver: IrExpression, v: IrExpression): IrExpression =
        irCall(androidSymbols.parcelWriteValue).apply {
            dispatchReceiver = receiver
            putValueArgument(0, v)
        }

    fun textUtilsWriteToParcel(
        cs: IrExpression,
        p: IrExpression,
        parcelableFlags: IrExpression
    ): IrExpression = irCall(androidSymbols.textUtilsWriteToParcel).apply {
        putValueArgument(0, cs)
        putValueArgument(1, p)
        putValueArgument(2, parcelableFlags)
    }

    fun classGetClassLoader(receiver: IrExpression): IrExpression =
        irCall(androidSymbols.classGetClassLoader).apply {
            dispatchReceiver = receiver
        }

    fun arrayListConstructor(p_0: IrExpression): IrExpression =
        irCall(androidSymbols.arrayListConstructor).apply {
            putValueArgument(0, p_0)
        }

    fun arrayListAdd(receiver: IrExpression, p_0: IrExpression): IrExpression =
        irCall(androidSymbols.arrayListAdd).apply {
            dispatchReceiver = receiver
            putValueArgument(0, p_0)
        }

    fun linkedHashSetConstructor(p_0: IrExpression): IrExpression =
        irCall(androidSymbols.linkedHashSetConstructor).apply {
            putValueArgument(0, p_0)
        }

    fun linkedHashSetAdd(receiver: IrExpression, p_0: IrExpression): IrExpression =
        irCall(androidSymbols.linkedHashSetAdd).apply {
            dispatchReceiver = receiver
            putValueArgument(0, p_0)
        }

    fun linkedListConstructor(): IrExpression = irCall(androidSymbols.linkedListConstructor).apply {
    }

    fun linkedListAdd(receiver: IrExpression, p_0: IrExpression): IrExpression =
        irCall(androidSymbols.linkedListAdd).apply {
            dispatchReceiver = receiver
            putValueArgument(0, p_0)
        }

    fun treeSetConstructor(): IrExpression = irCall(androidSymbols.treeSetConstructor).apply {
    }

    fun treeSetAdd(receiver: IrExpression, p_0: IrExpression): IrExpression =
        irCall(androidSymbols.treeSetAdd).apply {
            dispatchReceiver = receiver
            putValueArgument(0, p_0)
        }

    fun getTextUtilsCharSequenceCreator(): IrExpression =
        irGetField(null, androidSymbols.textUtilsCharSequenceCreator.owner)
}
